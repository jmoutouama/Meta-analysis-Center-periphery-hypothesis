axis.text.x = element_text(size = 8),
axis.text.y  = element_text(size = 10),
axis.line.x = element_line(linewidth = 0.1),
axis.line.y = element_line(linewidth = 0.1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=0.5))
osr<-mcmc_intervals(posterior_osr, pars = quote_bare(b0,b_tempgrow,b_pptgrow,b_pptdorm,b_tempdorm,b_pptgrow2,b_pptdorm2,b_tempgrow2,b_tempdorm2,b_tempdormpptdorm,b_tempgrowpptgrow)) +
ggplot2::scale_y_discrete(limits = c("b0","b_tempgrow","b_pptgrow","b_pptdorm","b_tempdorm","b_pptgrow2","b_pptdorm2","b_tempgrow2","b_tempdorm2","b_tempdormpptdorm","b_tempgrowpptgrow"),
labels=c("b0"="b0",
"b_pptgrow"="pptgrow",
"b_tempgrow"="tempgrow",
"b_pptdorm"="pptdorm",
"b_tempdorm"="tempdorm",
"b_tempdormpptdorm"="tempdormpptdorm",
"b_tempgrowpptgrow"="tempgrowpptgrow",
"b_pptgrow2"=expression(pptgrow^2),
"b_tempgrow2"=expression(tempgrow^2),
"b_pptdorm2"=expression(pptdorm^2),
"b_tempdorm2"=expression(tempdorm^2)))+
geom_vline(xintercept = 0, linetype = "dashed", size = 0.6, alpha = 0.6, color = "black") +
labs(color = "Interaction type:")+
xlab("Posterior estimates ")+
xlim(-2,2)+
# ggtitle("A") +
# geom_rect(xmin = 0, xmax=2.25, ymin = 0, ymax = 25, alpha = 0.006, fill = "#F4B400", color = NA)+
# geom_rect(xmin = -2.25, xmax = 0, ymin = 0, ymax = 25, alpha = 0.006, fill = "#0F9D58", color = NA)+
theme_pubr()+
theme(axis.title.x = element_text(family = "Helvetica",colour="black", size = 10),
axis.title.y = element_blank(),
axis.text.x = element_text(size = 8),
axis.text.y  = element_text(size = 10),
axis.line.x = element_line(linewidth = 0.1),
axis.line.y = element_line(linewidth = 0.1),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_rect(colour = "black", size=0.5))
osr
pdf("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/POAR-Forecasting/Manuscript/Figures/Posterior_ORS.pdf",useDingbats = F,height=4,width=5)
ggarrange(osr + rremove("ylab"), ncol = 1, nrow = 1)
dev.off()
rm(list = ls(all = TRUE))
rm(list = ls(all = TRUE))
# Load the required packages
library(taxize)
library(ape)
library(phytools)
library(ade4)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidytree)
library(aplot)
library(cowplot)
library(ggpubr)
library(ggsci)
library(R.rsp)
library(flextable)
library(effectsize)
library(metafor)
library(esc)
library(knitr)
library(tidyverse)
library(brms)
library(coda)
library(modelr)
library(gridExtra)
library(pBrackets)
library(performance)
library(kableExtra)
library(tidybayes)
library(formattable)
library(grid)
library(rstan)
rstan_options(auto_write = TRUE)
Ftable <- function(model, reorder = F, order, percent = F){
table <- summary(model)$fixed
table2 <-summary(model, prob = 0.9)$fixed %>% as_tibble()
names <- rownames(table)
table <- table %>%
as_tibble() %>%
dplyr::rename('L95%CL' = `l-95% CI`, 'U95%CL' = `u-95% CI`) %>%
select(-Rhat, -Bulk_ESS, -Tail_ESS)
table$`L90%CL` <- table2$`l-90% CI`
table$`U90%CL` <- table2$`u-90% CI`
table <-table %>%
mutate(Estimate = ifelse(`L95%CL`	* `U95%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)),  '*', sep = ''),
ifelse(`L90%CL`	* `U90%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)), '\206', sep = ''), round(Estimate, 3))),
rowname = names) %>%
dplyr::rename('SE    ' = Est.Error)  %>%
column_to_rownames(var = 'rowname')
if (reorder == T){
table <- table[order,]
}
table <- table %>%
kable(digits = 3, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling(position = "left")
return(table)
}
theme <-  theme(panel.background = element_blank(),
panel.border = element_rect(fill = NA),
strip.background = element_blank(),
axis.text.x = element_text(size = 10, colour = 'black'),
axis.text.y = element_text(size = 10, colour = 'black'),
#text        = element_text(size = 8),
axis.title.y = element_text(size = 10),# size of y lab
axis.title.x = element_text(size = 10),# size of X lab
legend.position     = "none",
legend.title        = element_text(size = 9),
legend.text         = element_text(size = 8),
legend.key.height   = unit(0.8,'line'),
legend.background   = element_blank(),
legend.key          = element_rect(colour = NA, fill = NA),
plot.title  = element_text(hjust = 0.5),
plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = "cm"))
# Load the required packages
library(taxize)
library(ape)
library(phytools)
library(ade4)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidytree)
library(aplot)
library(cowplot)
library(ggpubr)
library(ggsci)
library(R.rsp)
library(flextable)
library(effectsize)
library(metafor)
library(esc)
library(knitr)
library(tidyverse)
library(brms)
library(coda)
library(modelr)
library(gridExtra)
library(pBrackets)
library(performance)
library(kableExtra)
library(tidybayes)
library(formattable)
library(grid)
library(rstan)
rstan_options(auto_write = TRUE)
Lambdacp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis CPH/Data/Lambda.csv", header = T)
datlambdacp <- escalc("SMDH", m1i = mcenter, m2i = mperiphery, sd1i = sdcenter, sd2i = sdperiphery, n1i = ncenter, n2i = nperiphery, slab = Author, data = Lambdacp)
Lambdar <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis CPH/Data/Lambdar.csv", header = T)
datlambda<-rbind(datlambdacp,Lambdar)
datlambda$se<-sqrt(datlambda$vi)
datlambda
sp.lambda <- datlambda[, 4]
spnames <- as.character(sp.lambda)
species1 <- unique(spnames)
# length(species1)
# species2 <- gsub("\n", "", species1)
species2 <- gsub("\xca", " ", species1)
# length(species1)
species2 <- gsub("\n", "", species1)
species2 <- gsub("\xca", " ", species1)
# species2 <- gsub("\xca", " ", species1)
temp <- gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
# Retrieve classifications)
resolved_names <- classification(dat[, 2], db = "ncbi")
species2
datlambda
sp.lambda <- datlambda$Species
spnames <- as.character(sp.lambda)
species1 <- unique(spnames)
# length(species1)
species2 <- gsub("\n", "", species1)
species2 <- gsub("\xca", " ", species1)
species2 <- gsub("\xca", " ", species2)
# species2 <- gsub("\xca", " ", species2)
temp <- gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
dat
# Retrieve classifications)
resolved_names <- classification(dat[, 2], db = "ncbi")
resolved_names <- unique(resolved_names)
lapply(resolved_names, head)
class(resolved_names)
# lapply(resolved_names, head)
# class(resolved_names)
# Building a phylogenetic tree
lambdatree <- class2tree(resolved_names)
(lambdaphy <- lambdatree$phylo)
lambdaphyclean<-drop.tip(lambdaphy, lambdaphy$tip.label[-na.omit(match(datlambda$Species, lambdaphy$tip.label))])
A<-ape::vcv.phylo(lambdaphy)
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1  + (1 | ID) +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda[-c(11,18),],
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
datlambda$Species<-gsub("\xca", " ", datlambda$Species)
# datlambda$Species<-gsub("\xca", " ", datlambda$Species)
lambdaphyclean<-drop.tip(lambdaphy, lambdaphy$tip.label[-na.omit(match(datlambda$Species, lambdaphy$tip.label))])
A<-ape::vcv.phylo(lambdaphy)
A
datlambda[-c(11,18),]
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1  + (1 | ID) +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda,
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
# datlambda$Species<-gsub("\xca", " ", datlambda$Species)
lambdaphyclean<-drop.tip(lambdaphy, lambdaphy$tip.label[-na.omit(match(datlambda$Species, lambdaphy$tip.label))])
lambdaphyclean$tip.label
datlambda$Species
drop.tip(lambdaphy, lambdaphy$tip.label[-na.omit(match(datlambda$Species, lambdaphy$tip.label))])
setwd("~/Downloads")
setwd("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis")
rm(list = ls(all = TRUE))
# Load the required packages
library(taxize)
library(ape)
library(phytools)
library(ade4)
library(ggplot2)
library(RColorBrewer)
library(dplyr)
library(tidytree)
library(aplot)
library(cowplot)
library(ggpubr)
library(ggsci)
library(R.rsp)
library(flextable)
library(effectsize)
library(metafor)
library(esc)
library(knitr)
library(tidyverse)
library(brms)
library(coda)
library(modelr)
library(gridExtra)
library(pBrackets)
library(performance)
library(kableExtra)
library(tidybayes)
library(formattable)
library(grid)
library(rstan)
rstan_options(auto_write = TRUE)
getwd()
Ftable <- function(model, reorder = F, order, percent = F){
table <- summary(model)$fixed
table2 <-summary(model, prob = 0.9)$fixed %>% as_tibble()
names <- rownames(table)
table <- table %>%
as_tibble() %>%
dplyr::rename('L95%CL' = `l-95% CI`, 'U95%CL' = `u-95% CI`) %>%
select(-Rhat, -Bulk_ESS, -Tail_ESS)
table$`L90%CL` <- table2$`l-90% CI`
table$`U90%CL` <- table2$`u-90% CI`
table <-table %>%
mutate(Estimate = ifelse(`L95%CL`	* `U95%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)),  '*', sep = ''),
ifelse(`L90%CL`	* `U90%CL` > 0,
paste(sprintf('%.3f', round(Estimate, 3)), '\206', sep = ''), round(Estimate, 3))),
rowname = names) %>%
dplyr::rename('SE    ' = Est.Error)  %>%
column_to_rownames(var = 'rowname')
if (reorder == T){
table <- table[order,]
}
table <- table %>%
kable(digits = 3, escape = F, table.attr = "style = \"color: black;\"") %>%
kable_styling(position = "left")
return(table)
}
theme <-  theme(panel.background = element_blank(),
panel.border = element_rect(fill = NA),
strip.background = element_blank(),
axis.text.x = element_text(size = 10, colour = 'black'),
axis.text.y = element_text(size = 10, colour = 'black'),
#text        = element_text(size = 8),
axis.title.y = element_text(size = 10),# size of y lab
axis.title.x = element_text(size = 10),# size of X lab
legend.position     = "none",
legend.title        = element_text(size = 9),
legend.text         = element_text(size = 8),
legend.key.height   = unit(0.8,'line'),
legend.background   = element_blank(),
legend.key          = element_rect(colour = NA, fill = NA),
plot.title  = element_text(hjust = 0.5),
plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = "cm"))
Lambdacp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/Lambda.csv", header = T)
datlambdacp <- escalc("SMDH", m1i = mcenter, m2i = mperiphery, sd1i = sdcenter, sd2i = sdperiphery, n1i = ncenter, n2i = nperiphery, slab = Author, data = Lambdacp)
Lambdar <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/Lambdar.csv", header = T)
datlambda<-rbind(datlambdacp,Lambdar)
datlambda$se<-sqrt(datlambda$vi)
datlambda
sp.lambda <- datlambda[, 4]
spnames <- as.character(sp.lambda)
species1 <- unique(spnames)
# length(species1)
# species2 <- gsub("\n", "", species1)
species2 <- gsub("\xca", " ", species1)
# length(species1)
species2 <- gsub("\n", "", species1)
# species2 <- gsub("\xca", " ", species1)
temp <- gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
# Retrieve classifications)
resolved_names <- classification(dat[, 2], db = "ncbi")
sp.lambda <- datlambda[,5]
spnames <- as.character(sp.lambda)
species1 <- unique(spnames)
# length(species1)
species2 <- gsub("\n", "", species1)
species2 <- gsub("\xca", " ", species1)
# species2 <- gsub("\xca", " ", species1)
temp <- gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
datlambda
# species2 <- gsub("\xca", " ", species1)
temp <- gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
# Retrieve classifications)
resolved_names <- classification(dat[, 2], db = "ncbi")
resolved_names <- unique(resolved_names)
lapply(resolved_names, head)
# Building a phylogenetic tree
lambdatree <- class2tree(resolved_names)
(lambdaphy <- lambdatree$phylo)
plot(lambdaphy)
datlambda$Species<-gsub("\xca", " ", datlambda$Species)
# datlambda$Species<-gsub("\xca", " ", datlambda$Species)
lambdaphyclean<-drop.tip(lambdaphy, lambdaphy$tip.label[-na.omit(match(datlambda$Species, lambdaphy$tip.label))])
A<-ape::vcv.phylo(lambdaphy)
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1  +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda[-c(11,18),],
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
datlambda
lambdaphy$tip.label
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | ID) +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda[-c(11,18),],
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
phylo <- ape::read.nexus("https://paul-buerkner.github.io/data/phylo.nex")
phylo
data_simple <- read.table(
"https://paul-buerkner.github.io/data/data_simple.txt",
header = TRUE
)
data_simple
lambdaphy$tip.label
resolved_names
sp.lambda <- datlambda[,5]
spnames <- as.character(sp.lambda)
species1 <- unique(spnames)
spnames
# length(species1)
species2 <- gsub("\n", "", species1)
# species2 <- gsub("\xca", " ", species1)
temp <- gnr_resolve(species2, best_match_only = TRUE, canonical = TRUE)
dat <- merge(data.frame(species2), temp[,c("user_supplied_name", "matched_name2")],
by.x = "species2", by.y = "user_supplied_name", all.x = TRUE)
dat
# Retrieve classifications)
resolved_names <- classification(dat[, 2], db = "ncbi")
resolved_names <- unique(resolved_names)
# Building a phylogenetic tree
lambdatree <- class2tree(resolved_names)
(lambdaphy <- lambdatree$phylo)
dat
lambdaphy$tip.label
# datlambda$Species<-gsub("\xca", " ", datlambda$Species)
lambdaphyclean<-drop.tip(lambdaphy, lambdaphy$tip.label[-na.omit(match(datlambda$Species, lambdaphy$tip.label))])
A<-ape::vcv.phylo(lambdaphyclean)
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | ID) +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda[-c(11,18),],
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
# Building a phylogenetic tree
lambdatree <- class2tree(resolved_names)
(lambdaphy <- lambdatree$phylo)
# datlambda$Species<-gsub("\xca", " ", datlambda$Species)
lambdaphyclean<-drop.tip(lambdaphy, lambdaphy$tip.label[-na.omit(match(datlambda$Species, lambdaphy$tip.label))])
lambdaphyclean
A<-ape::vcv.phylo(lambdaphyclean)
A
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | ID) +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda[-c(11,18),],
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1 +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda[-c(11,18),],
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
lambdaphyclean$tip.label
Lambdamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | ID) +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda,
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
datlambda$Species
Lambdamodel <- brm(
yi | se(se) ~ 1 + (1 | ID) +  (1 | Author) + (1|gr(Species, cov = A)),
data = datlambda,
family = gaussian(),
control = list(adapt_delta = 0.9999, max_treedepth = 15),
iter = 3000, cores = 4,
data2 = list(A = A)
)
gencp <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/genetic.csv", header = T)
genr <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/geneticr.csv", header = T)
datgen <- escalc("SMDH", m1i = mcenter, m2i = mperiphery, sd1i = sdcenter, sd2i = sdperiphery, n1i = ncenter, n2i = nperiphery, slab = Author, data = gencp)
datgencp<-rbind(datgen,genr)
datgencp <- datgen[!apply(datgen[,c("yi", "vi")], 1, anyNA),]
datgencp$se<-sqrt(datgencp$vi)
genr <- read.csv("/Users/jm200/Library/CloudStorage/Dropbox/Miller Lab/github/Meta-analysis-Center-periphery-hypothesis/Data/geneticr.csv", header = T)
datgen <- escalc("SMDH", m1i = mcenter, m2i = mperiphery, sd1i = sdcenter, sd2i = sdperiphery, n1i = ncenter, n2i = nperiphery, slab = Author, data = gencp)
datgencp<-rbind(datgen,genr)
datgencp <- datgen[!apply(datgen[,c("yi", "vi")], 1, anyNA),]
datgencp$se<-sqrt(datgencp$vi)
genamodel <- brm(
yi | se(se, sigma = TRUE) ~ 1 + (1 | Author) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
iter = 5000, cores = 4,
data = datgencp
)
datgencp$ID<-as.factor(datgencp$ID)
datgencp
genamodel <- brm(
yi | se(se) ~ 1 + (1 | Author) + (1 | Author) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
iter = 5000, cores = 4,
data = datgencp
)
genamodel <- brm(
yi | se(se) ~ 1 + (1 | ID) + (1 | Author) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
iter = 5000, cores = 4,
data = datgencp
)
datgencp$ID<-as.factor(datgencp$ID)
str(datgencp)
genamodel <- brm(
yi | se(se) ~ 1 + (1 | ID) + (1 | Author) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
iter = 5000, cores = 4,
data = datgencp
)
datgen
datgencp
priors <- c(prior(normal(0,1), class = Intercept),
prior(cauchy(0,0.5), class = sd))
genamodel <- brm(
yi | se(se) ~ 1 + (1 | ID) + (1 | Author) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
prior = priors,
iter = 5000, cores = 4,
data = datgencp
)
genamodel <- brm(
yi | se(se) ~ 1  + (1 | Author) + (1|Species),
#control = list(adapt_delta = 0.9999, max_treedepth = 20),
prior = priors,
iter = 5000, cores = 4,
data = datgencp
)
genamodel <- brm(
yi | se(se) ~ 1 + (1 | ID) + (1 | Author) + (1|Species),
control = list(adapt_delta = 0.9999, max_treedepth = 20),
prior = priors,
iter = 5000, cores = 4,
data = datgencp
)
pp_check(genamodel)+
xlab("Genetic diversity status")+ylab("Density")+
ggtitle((""))+theme->ppc_genetic
